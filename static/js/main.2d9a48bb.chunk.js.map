{"version":3,"sources":["App.js","index.js"],"names":["i18n","use","initReactI18next","init","resources","en","translation","language","heading","weight","height","submit","reload","answer","under_weight","normal_weight","over_weight","sk","lng","fallbackLng","interpolation","escapeValue","App","t","useTranslation","_useState","useState","_useState2","_slicedToArray","setWeight","_useState3","_useState4","setHeight","_useState5","_useState6","bmi","setBmi","_useState7","_useState8","message","setMessage","_useState9","_useState10","loading","setLoading","React","createElement","color","emoji","setDarkMode","document","querySelector","setAttribute","localStorage","setItem","selectedTheme","getItem","useEffect","setTimeout","Suspense","fallback","className","ClimbingBoxLoader","size","type","onChange","event","target","checked","defaultChecked","name","changeLanguage","value","role","aria-label","onSubmit","preventDefault","alert","toFixed","onClick","window","location","ReactDOM","createRoot","getElementById","render"],"mappings":"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","file":"static/js/main.2d9a48bb.chunk.js","sourcesContent":["import React  from 'react';\nimport { Suspense, useState, useEffect } from \"react\";\n/* importing i18next */\nimport i18n from \"i18next\"\nimport { initReactI18next, useTranslation} from \"react-i18next\"\n/* importing react spinners animation for pre-loader */\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\n/* importing css */\nimport \"./index.css\"\n\n/* language translation */\nconst translationsEn = {language: \"Language\",\n                        heading: \"BMI Calculator\",\n                        weight: \"Weight (kgs)\",\n                        height: \"Height (cm)\",\n                        submit: \"Submit\", reload: \"Reload\",\n                        answer : \"Your BMI is : \",\n                        under_weight: \"You are underweight\",\n                        normal_weight: \"You are healthy weight\",\n                        over_weight: \"You are overweight\",\n};\n\nconst translationsSk = {language: \"Jazyk\",\n                        heading: \"BMI Kalkulačka\",\n                        weight: \"Váha (kg)\",\n                        height: \"Výška (cm)\",\n                        submit: \"Potvrdiť\",\n                        reload: \"Obnoviť\",\n                        answer : \"Tvoje BMI  je : \",\n                        under_weight: \"Máš podváhu\",\n                        normal_weight: \"Máš zdravá váhu\",\n                        over_weight: \"Máš nadváhu\",\n};\n\n/* initialization of i18next for language change */\ni18n \n    .use(initReactI18next)\n    .init(    {\n      resources: {\n        en : { translation: translationsEn },\n        sk: { translation: translationsSk },\n      },\n      lng: \"en\",\n      fallbackLng: \"en\",\n      interpolation: { escapeValue : false},\n    });\n\n/* main function App */\n\nfunction App() {\n  /* declaring useTranslation hook */\n  const { t } = useTranslation();\n\n  /* declaring hooks for changing weight and height value */\n  const [weight, setWeight] = useState(0);\n  const [height, setHeight] = useState(0);\n\n  const [bmi, setBmi] = useState(\"\");\n  const [message , setMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  /* using variable to declare adapted message for user */\n  const under_weight = <p>{t('under_weight')}</p>;\n  const normal_weight = <p>{t('normal_weight')}</p>;\n  const over_weight = <p>{t('over_weight')}</p>;\n\n  /* declaring standard value for loading animation */\n  let color = \"#000\";\n\n  /* declaring variable for adapted emoji */\n  let emoji = \"\";\n\n  /* functions for remembering selectedTheme value after refreshing */\n  \n  const setDarkMode = () => {\n    document.querySelector(\"body\").setAttribute('data-theme', 'dark')\n    localStorage.setItem(\"selectedTheme\", \"dark\")\n  }\n\n  const setLightMode = () => {\n    document.querySelector(\"body\").setAttribute('data-theme', 'light')\n    localStorage.setItem(\"selectedTheme\", \"light\")\n  }\n\n  const selectedTheme = localStorage.getItem(\"selectedTheme\")\n  if(selectedTheme === \"dark\") {\n    color = \"#fff\"\n    setDarkMode();\n  }\n\n  const toggleTheme = (event) => {\n    if(event.target.checked){setDarkMode();}\n    else {setLightMode()}\n  }\n \n  /*  arrow function for changing language */\n  let onChange = (event) => {\n    i18n.changeLanguage(event.target.value);\n  }\n\n  /* main bmi calculation with preventing undesirable values */\n\n  let calcBmi = (event) => {\n    event.preventDefault()\n\n    if (weight === 0 || height === 0) {\n      alert('Please enter a valid value')\n    } else {\n      let bmi = (weight / (height * height / 10000))\n      setBmi(bmi.toFixed(1))\n\n      if (bmi < 18.5) {\n        setMessage(under_weight)\n      } else if (bmi >= 18.5 && bmi < 24.9) {\n        setMessage(normal_weight)\n      } else {\n        setMessage(over_weight)\n      }\n      /* preventing lower limit*/\n      if (weight < 25 || height < 100){\n      alert('Please enter a valid value')\n      setBmi(null);\n      setMessage(null)\n      }\n      /* preventing upper limit*/\n      if (weight > 300 || height > 250){\n      alert('Please enter a valid value')\n      setBmi(null);\n      setMessage(null)\n      }\n    }\n  }\n\n  /* emoji change based on bmi value */\n  \n  if (bmi < 1) {\n    emoji = null;\n  } else {\n    if (bmi < 18.5){\n      emoji = \"😌\"\n    } else if (bmi >= 18.5 && bmi < 24.9) {\n      emoji = \"😇\"\n    } else {\n      emoji = \"😏\"\n    }\n  }\n  /* arrow function for reload */\n\n  let reload = () => {\n    window.location.reload(); \n  } \n  \n  /* react-spinners animation using useEffect() */\n  useEffect(() => {\n    setLoading(true)\n    setTimeout(() => {\n      setLoading(false)\n    }, 2500)\n  }, [])\n  /* returning JSX */\n\n  return (\n    <Suspense fallback=\"Loading...\">\n    <div className=\"app\">\n      {/* using react-spinners and ternar operator, loading will be true for defined amount of seconds\n      than set to false and returning app*/}\n      {\n        loading ?\n\n        <ClimbingBoxLoader\n        size={30}\n        color={color}\n        loading={loading}\n        />\n        : \n         <div className=\"container\">\n          <div className=\"addons\">\n          <div className ='darkmode-switch'>\n            <label className=\"darkmode-label\">\n                <input className=\"darkmode-input\" type='checkbox' onChange={toggleTheme} defaultChecked={selectedTheme === \"dark\"}/>\n                <span className='slider'></span>\n            </label>\n            </div>\n          <div className=\"language\">\n            <label className=\"title\">{t('language')} </label>\n                <select name=\"language\" onChange={onChange}>\n                  <option value=\"en\"><span role='img' aria-label='flag'>🇺🇸</span></option>\n                  <option value=\"sk\"><span role='img' aria-label='flag'>🇸🇰</span></option>\n                </select>\n          </div>\n        </div>\n        <h2 className=\"center\">{t('heading')}</h2>\n        <form onSubmit={calcBmi}>\n          <div>\n            <label>{t('weight')}</label>\n            <input type=\"number\" value={weight} onChange={(event) => setWeight(event.target.value)}></input>\n          </div>\n          <div>\n            <label>{t('height')}</label>\n            <input type=\"number\" value={height} onChange={(event) => setHeight(event.target.value)}></input>\n          </div>\n          <div>\n            <button className=\"button\" type=\"submit\">{t('submit')}</button>\n            <button className=\"button button-outline\" type=\"submit\" onClick={reload}>{t('reload')}</button>\n          </div>\n        </form>\n        <div className=\"center\">\n          <h3>{t(\"answer\")} {bmi}</h3>\n          <p>{message}</p>\n        </div>\n        <div className=\"emoji\">\n          <p>{emoji}</p>\n        </div>\n      </div>\n      }\n    </div>\n    </Suspense>\n  )\n}\n/* exporting component to main index.js file */\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( \n     <App />\n)\n"],"sourceRoot":""}